// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                      @id @default(uuid())
  email              String                      @unique
  fullName           String                      @map("full_name")
  phoneNumber        String                      @map("phone_number")
  shippingAddress    String                      @map("shipping_address")
  password           String
  isVerified         Boolean                     @default(false) @map("is_verified")
  verificationCode   String?                     @map("verification_code")
  role               Role                        @default(USER)
  RefreshToken       RefreshToken[]
  ResetVerifications PasswordResetVerification[]

  @@map("users")
}

model RefreshToken {
  id          String   @id @default(cuid())
  hashedToken String   @map("hashed_token")
  userId      String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model PasswordResetVerification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  code      String
  createdAt DateTime @default(now()) @map("created_at")
  used      Boolean  @default(false)

  @@map("password_reset_verifications")
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String?
  inStock     Int     @default(0) @map("in_stock")
  price       Float
  category    String

  OrderDetail OrderDetail[]

  @@map("products")
}

model Order {
  orderId        String         @id @default(uuid()) @map("order_id")
  userId         String         @map("user_id")
  totalAmount    Float          @default(0) @map("total_amount")
  paymentStatus  PaymentStatus  @default(PENDING) @map("payment_status")
  deliveryStatus DeliveryStatus @default(PENDING) @map("delivery_status")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  orderDetails   OrderDetail[]
  Payment        Payment?

  @@map("order")
}

model OrderDetail {
  orderDetailId   String @id @default(uuid()) @map("order_detail_id")
  orderId         String @map("order_id")
  productId       String @map("product_id")
  quantity        Int
  priceAtPurchase Float  @map("price_at_purchase")

  order   Order   @relation(fields: [orderId], references: [orderId])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_detail")
}

model Payment {
  paymentId     String        @id @default(uuid()) @map("payment_id")
  orderId       String        @unique @map("order_id")
  totalAmount   Float         @map("total_amount")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  transactionId String        @default(uuid()) @map("transaction_id")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [orderId])

  @@map("payments")
}

enum Role {
  ADMIN
  USER
}

enum PaymentStatus {
  COMPLETE
  FAILED
  PENDING
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
}
